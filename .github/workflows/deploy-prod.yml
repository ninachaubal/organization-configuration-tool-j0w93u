name: Deploy to Production

on:
  push:
    branches: [main]
    paths:
      - src/**
      - package.json
      - package-lock.json
      - yarn.lock
      - infrastructure/**
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Confirm production deployment'
        required: true
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Notify deployment start
        uses: voxmedia/github-action-slack-notify-build@v1.6.0
        with:
          channel: '#deployments'
          status: 'STARTING'
          color: 'warning'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Install backend dependencies
        working-directory: src/backend
        run: npm ci

      - name: Build backend
        working-directory: src/backend
        run: npm run build

      - name: Install frontend dependencies
        working-directory: src/web
        run: npm ci

      - name: Build frontend
        working-directory: src/web
        run: npm run build
        env:
          ORGANIZATION_CONFIGURATION_TABLE_NAME: ${{ secrets.ORGANIZATION_CONFIGURATION_TABLE_NAME }}
          NEXT_PUBLIC_API_BASE_URL: '/api'
          NODE_ENV: 'production'

      - name: Install CDK dependencies
        working-directory: infrastructure/cdk
        run: npm ci

      - name: Deploy to AWS Amplify
        working-directory: infrastructure/cdk
        run: npm run cdk deploy AmplifyProdStack -- --require-approval never
        env:
          ENVIRONMENT: 'production'
          ORGANIZATION_CONFIGURATION_TABLE_NAME: ${{ secrets.ORGANIZATION_CONFIGURATION_TABLE_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Run smoke tests
        run: npm run test:smoke
        working-directory: src/web
        env:
          PROD_URL: ${{ secrets.PROD_APP_URL }}

      - name: Verify deployment
        run: "curl -s -o /dev/null -w '%{http_code}' ${{ secrets.PROD_APP_URL }}/api/health | grep 200 || exit 1"

      - name: Create deployment tag
        if: success()
        run: git tag prod-$(date +%Y%m%d%H%M%S) && git push --tags

      - name: Notify deployment success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1.6.0
        with:
          channel: '#deployments'
          status: 'SUCCESS'
          color: 'good'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify deployment failure
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1.6.0
        with:
          channel: '#deployments'
          status: 'FAILED'
          color: 'danger'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Rollback on failure
        if: failure()
        working-directory: infrastructure/cdk
        run: npm run cdk rollback AmplifyProdStack
        env:
          ENVIRONMENT: 'production'
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Notify rollback status
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { job, conclusion } = context.payload;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Production deployment failed and rollback was initiated. Please check logs for details.`
            })